/*Rosetta Code: ABC Problem

You are given a collection of ABC blocks (e.g., childhood alphabet blocks). There are 20 blocks with two letters on each block. A complete alphabet is guaranteed amongst all sides of the blocks. The sample collection of blocks:


Implement a function that takes a string (word) and determines whether the word can be spelled with the given collection of blocks.

Some rules to keep in mind:

    Once a letter on a block is used, that block cannot be used again.
    The function should be case-insensitive.

*/
function canMakeWord(word) {
   const lettersArr = [ ['B', 'O'],['X', 'K'],['D', 'Q'],['C', 'P'],['N', 'A'],['G', 'T'],['R', 'E'],['T', 'G'],['Q', 'D'],['F', 'S'],['J', 'W'],['H', 'U'],['V', 'I'],['A', 'N'],['O', 'B'],['E', 'R'],['F', 'S'],['L', 'Y'],['P', 'C'],['Z', 'M'] ];
    let compare = 0;
    word = word.toUpperCase().split("");

    for (let letter = 0; letter < word.length; letter ++) {
        for (let i = 0; i < lettersArr.length; i++) {
            if (lettersArr[i].indexOf(word[letter]) >= 0) {
                lettersArr.splice(i,1);
                compare++;
                break;
            }
        } 
    }
   
   return compare == word.length ? true : false; 
}

Code Explanation

The function is Case sensitive, the argument is passed in uppercase and then converted to an array so we can loop through it later.
word = word.toUpperCase().split("");

let compare is created in order to be incremented each time a letter is found.

We loop through our argument in order to test each letter separately.

For each letter, we loop through lettersArr to test each blocks separately.
If the letter is present in a block, we delete the block,
lettersArr.splice(i,1);
then we increment compare.
compare++;

Now it is necessary to stop looping on lettersArr in order not to delete another block which could contain this same letter.
break;

Now we test compare to see if it has been incremented as many times as there are letters in our argument.
return compare == word.length ? true : false; 
